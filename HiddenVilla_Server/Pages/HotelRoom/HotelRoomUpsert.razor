@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using HiddenVilla_Server.Service.IService;
@using System.IO
@inject IHotelRoomRepository HotelRoomRepository
@inject NavigationManager NavigationManager

<div class="row mt-2 mb-5">
    <h3 calss="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelUpsert">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary /> *@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control" />
                        <ValidationMessage For="() => HotelRoomModel.Name" />
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control" />
                        <ValidationMessage For="() => HotelRoomModel.Occupancy" />
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularPrice" class="form-control" />
                        <ValidationMessage For="() => HotelRoomModel.RegularPrice" />
                    </div>
                    <div class="form-group">
                        <label>Square Feet</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control" />
                    </div>
                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple />
                        <div class="row">
                        @if(HotelRoomModel.ImageUrls is not null && HotelRoomModel.ImageUrls.Count > 0)
                        {
                            foreach (var roomImage in HotelRoomModel.ImageUrls)
                            {
                                <div class="col-md-2 mt-3">
                                    <div style="background: url('@roomImage') 50% 50%; "></div>
                                </div>
                                <button type="button" class="btn btn-outline-danger btn-block mt-4">
                                    Delete
                                </button>
                            }
                        }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    [Inject]
    public IFileUpload FileUpload { get; set; }

    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";


    protected async override Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updating
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
        }
        else
        {
            //create
            HotelRoomModel = new HotelRoomDTO();
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
             var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadImagePath);
                    }
                    else
                    {
                        await JSRuntime.ToastrError("Please select .jpg/.jpeg/.png files only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls == null)
                    {
                        HotelRoomModel.ImageUrls = new();
                    }

                    HotelRoomModel.ImageUrls.AddRange(images);
                }
                else
                {
                    await JSRuntime.ToastrError("Image uploading failed.");
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.ToastrError(ex.Message);
        }
    }
    
    private async Task HandleHotelUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                await JSRuntime.ShowErrorModal("Duplication Error", "The room name you have chosen is already in use.");
                return;
            }

            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                //update
                var updateResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                await JSRuntime.ToastrSuccess("Hotel room updated successfully.");
            }
            else
            {
                //create
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await JSRuntime.ToastrSuccess("Hotel room added successfully.");
            }
        }
        catch(Exception ex)
        {
            //log
        }

        NavigationManager.NavigateTo("hotel-room");
    }
}